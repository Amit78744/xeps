<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>privileged entity</title>
  <abstract>This specification provides a way for XMPP entities to have a privileged access to other entities data</abstract>
  <legal>
    <copyright>This XMPP Extension Protocol is copyright (c) 1999 - 2014 by the XMPP Standards Foundation (XSF).</copyright>
    <permissions>Permission is hereby granted, free of charge, to any person obtaining a copy of this specification (the &quot;Specification&quot;), to make use of the Specification without restriction, including without limitation the rights to implement the Specification in a software program, deploy the Specification in a network service, and copy, modify, merge, publish, translate, distribute, sublicense, or sell copies of the Specification, and to permit persons to whom the Specification is furnished to do so, subject to the condition that the foregoing copyright notice and this permission notice shall be included in all copies or substantial portions of the Specification. Unless separate permission is granted, modified works that are redistributed shall not contain misleading information regarding the authors, title, number, or publisher of the Specification, and shall not claim endorsement of the modified works by the authors, any organization or project to which the authors belong, or the XMPP Standards Foundation.</permissions>
    <warranty>## NOTE WELL: This Specification is provided on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. In no event shall the XMPP Standards Foundation or the authors of this Specification be liable for any claim, damages, or other liability, whether in an action of contract, tort, or otherwise, arising from, out of, or in connection with the Specification or the implementation, deployment, or other use of the Specification. ##</warranty>
    <liability>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall the XMPP Standards Foundation or any author of this Specification be liable for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising out of the use or inability to use the Specification (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if the XMPP Standards Foundation or such author has been advised of the possibility of such damages.</liability>
    <conformance>This XMPP Extension Protocol has been contributed in full conformance with the XSF's Intellectual Property Rights Policy (a copy of which may be found at &lt;<link url='http://xmpp.org/extensions/ipr-policy.shtml'>http://xmpp.org/extensions/ipr-policy.shtml</link>&gt; or obtained by writing to XSF, P.O. Box 1641, Denver, CO 80201 USA).</conformance>
  </legal>
  <number>xxxx</number>
  <status>ProtoXEP</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0114</spec>
    <spec>XEP-0004</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  <author>
    <firstname>Jérôme</firstname>
    <surname>Poisson</surname>
    <email>goffi@goffi.org</email>
    <jid>goffi@jabber.fr</jid>
  </author>
  <revision>
    <version>0.0.3</version>
    <date>2014-11-13</date>
    <initials>jp</initials>
    <remark><ul>
                <li>giving permission to manage this XEP namespace is forbidden</li>
                <li>Added configuration section; with well-defined command node</li>
                <li>better specification of persistent permissions</li>
                <li>fixed erroneous example (server returns bookmarks)</li>
                <li>added special permissions</li>
                <li>better specification of &QUERY; element</li>
            </ul>
    </remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2014-09-17</date>
    <initials>jp</initials>
    <remark><ul>
                <li>changed for privileged entity</li>
                <li>fixes after feedbacks on standard mailing list</li>
                <li>completed missing required parts</li>
            </ul>
    </remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2014-05-09</date>
    <initials>jp</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
    <p>XMPP components are used for long through &xep0114;, but are quite limited: they have a restricted access to other entities data, similar to what a client can do. This is sufficient for components like gateways, but very limiting for more complex components like a PubSub service. The goal of this XEP is to allow a component or any entity to have a "privileged" status, and access an other entity data with the same privileges than the entity itself, that means send and receive &IQ; stanzas on its behalf (and in <link url='#special'>some cases</link>, send &MESSAGE; or receive &PRESENCE; stanzas).</p>
    <p>Privileged entities have numerous advantages, including:</p>
        <ul>
            <li>a step forward in decentralization: it is possible for an entity to do tasks which were before reserved to server itself. For example, a privileged pubsub component can offer access model based on publisher's roster</li>
            <li>better integration of components: a gateway can add items to an entity roster itself</li>
            <li>possibility to overpass a server limitation</li>
            <li>quick development cycle: developers can implement the components they need without waiting for a new server release</li>
            <li>server agnostic</li>
        </ul>
</section1>

<section1 topic='Requirements' anchor='reqs'>
    <p>A privileged entity can be used in two modes:</p>
        <ul>
            <li><strong>admin</strong> mode, where it is installed by the server administrator.</li>
            <li><strong>client</strong> mode, where it can be installed by any user</li>
        </ul>
    <p>In <em>admin</em> mode, the privileged entity MAY be able to emit &IQ; stanzas in the same way as any entity, including managing roster or accessing persistent storage. The privilege mechanism MUST be totally transparent for the managed entities.</p>
    <p>In <em>client</em> mode, a privileged entity MUST have an explicit authorization for any &IQ; namespace he wants to use. Client SHOULD be able to check and revoke granted permissions, and if it's not possible, permissions MUST be revoked after a disconnection.</p>
    <p>In addition, some <link url='#special'>special permissions</link> can permit to send &MESSAGE; stanzas on behalf of the server or access &PRESENCE; informations.</p>
</section1>

<section1 topic='Glossary' anchor='glossary'>
  <ul>
    <li><strong>Privileged entity</strong> — the entity which has a privileged status.</li>
    <li><strong>Managed entity</strong> — the entity that is managed by a privileged entity.</li>
  </ul>
</section1>

<section1 topic='Admin Mode Use Cases' anchor='admin_usecases'>

    <section2 topic='Permission Request Use Case' anchor='admin_perm'>
        <section3 topic='Entity Requests Admin Privilege' anchor='req_status'>
            <p>Once an entity is authenticated and stream is started, it can request a privileged status. It does it by sending an &IQ; stanza with <strong>'urn:xmpp:privilege:0'</strong> namespace.</p>
        <p>The &QUERY; element MUST have a "request" type and MAY have a 'privilege' attribute with the value "admin". Namespace permissions are asked with a &lt;perm/&gt; element, which MUST contain a 'namespace' attribute set to the requested namespace and a 'type' attribute which can be:</p>
        <ul>
            <li><strong>get</strong> — the entity needs the privilege to send &IQ; stanzas of type <em>'get'</em></li>
            <li><strong>set</strong> — the entity needs the privilege to send &IQ; stanzas of type <em>'set'</em></li>
            <li><strong>both</strong> — the entity needs the privilege to send &IQ; stanzas of type <em>'get'</em> and <em>'set'</em></li>
        </ul>
            <example caption='Entity asks for admin privilege'><![CDATA[
<iq from='pubsub.capulet.net' type='get' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0' type='request' privilege='admin'>
        <perm namespace='jabber:iq:roster' type='both'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
    </query>
</iq>
            ]]></example>
        </section3>
        <section3 topic='Server Accepts Admin Privilege' anchor='accept_status'>
            <p>If the server accepts the privileged status (e.g.: admin status specified in configuration), it MUST return an &IQ; result stanza with a &QUERY; element of type "allowed", and listing the allowed permissions in &lt;perm/&gt; elements:</p>
            <example caption='Server accepts admin privilege'><![CDATA[
<iq from='capulet.net' to='pubsub.capulet.net' type='result' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0'
           type='allowed'>
        <perm namespace='jabber:iq:roster' type='both'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
    </query>
</iq>
]]></example>
<p>Note: the granted permissions MAY be different from the requested ones, according to server's configuration.</p>
        </section3>
        <section3 topic='Server Rejects Admin Privilege' anchor='reject_status'>
            <p>If the server rejects the privileged status, it MUST return a &forbidden; error:</p>
            <example caption='Server rejects admin privilege'><![CDATA[
<iq from='capulet.net' to='pubsub.capulet.net' type='error' id='privilege1'>
    <error type='cancel'>
        <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    </error>
</iq>
            ]]></example>
        </section3>
    </section2>

    <section2 topic='Privileged Entity Sends &IQ; Stanzas' anchor='priv_iq_admin'>
        <p>Sending an &IQ; stanza is done by sending the stanza the way it would be done by the managed entity, except that its JID is in the 'to' attribute. In the following example, the PubSub service want to know Juliet's roster because she owns a node with access model based on publiser's roster:</p>
            <example caption='Privileged Entity Sends A Roster Stanza'><![CDATA[
<iq id='roster1'
    xmlns='urn:xmpp:privilege:0'
    to='juliet@example.com'
    type='get'
    id='roster1'>
        <query xmlns='jabber:iq:roster'/>
</iq>
            ]]></example>

        <p>The server then answers normally, as it would have done to the managed entity:</p>
            <example caption='Server Answers To Privileged Entity'><![CDATA[
<iq id='roster1'
    from='juliet@example.com'
    to='pubsub.capulet.net'
    type='result'>
    <query xmlns='jabber:iq:roster' ver='ver7'>
        <item jid='nurse@example.com'/>
        <item jid='romeo@example.net'/>
    </query>
</iq>
            ]]></example>

        <p>In the following example, the sync.capulet.net privileged entity want to access managed entity's bookmarks to synchronize them with an online service. It can request the bookmarks in the following way:</p>
            <example caption='Privileged Entity Request Bookmarks'><![CDATA[
<iq id='bookmark1'
    to='juliet@capulet.lit'
    type='get'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
        <items node='storage:bookmarks'/>
    </pubsub>
</iq>
            ]]></example>
        <p>and server answers:</p>

            <example caption='Server Returns Bookmarks'><![CDATA[
<iq id='bookmark1'
    to='sync.capulet.net'
    type='result'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='storage:bookmarks'>
      <item id='current'>
        <storage xmlns='storage:bookmarks'>
          <conference name='The Play&apos;s the Thing'
                      autojoin='true'
                      jid='theplay@conference.shakespeare.lit'>
            <nick>JC</nick>
          </conference>
        </storage>
      </item>
    </items>
  </pubsub>
</iq>
            ]]></example>
    </section2>
</section1>

<section1 topic='Client Mode Use Cases' anchor='client_usecases'>
    <section2 topic='Permission Request Use Case' anchor='client_perm'>
        <p>In <em>client</em> mode, the privileged entity is not certified by the server administrator, so the permissions MUST be <strong>explicitly</strong> allowed by the managed entity. This is initiated by the privileged entity (it can be after an interaction with a managed entity, like a subscription). It's done in the same way as for <em>admin</em> mode with the following exceptions:</p>
        <ol>
            <li>the privilege type is <em>client</em> instead of <em>admin</em></li>
            <li>the privilege is given per entity, so the managed entity MUST be specified in a 'to' attribute</li>
        </ol>
        <p>If an entity want a read/write access to a client's roster (Juliet) and a read only access to her pubsub, it can ask the permission like this:
        </p>
            <example caption='Entity asks for user privilege'><![CDATA[
<iq from='priv.montaigu.net' to='capulet.net' type='get' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0'
           type='request'
           privilege='client'
           to='juliet@capulet.net'>
        <perm namespace='jabber:iq:roster' type='both'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='get'/>
    </query>
</iq>
]]></example>
<p>Once received the permission request, the server asks the client to grant or deny the requested permission using &xep0004;. The form SHOULD allow to fine tune the granted permissions. The server uses a challenge which it MUST have generated himself.
</p>
    <example caption='Server asks user for the permission'><![CDATA[
<message from='capulet.net' to='juliet@capulet.net'>
    <body>
        priv.montaigu.net wants some privileges.
        Do you you allow him to use the following features?

        Be careful! According permissions to an entity is a serious thing,
        think twice that you can trust the entity before doing this.
    </body>
    <x xmlns='jabber:x:data' type='form'>
        <title>Privileges request</title>
        <instructions>priv.montaigu.net wants to use the following features:
            Do you allow it?</instructions>
        <field type='hidden' var='challenge'><value>5439123</value></field>
        <field type='hidden' var='FORM_TYPE'>
            <value>urn:xmpp:privilege:0</value>
        </field>
        <field type='list-single'
            label='Manage roster (jabber:iq:roster) READ/WRITE'
            var='jabber:iq:roster'>
            <value>0</value>
            <option label='None'><value>none</value></option>
            <option label='Read only (get)'><value>get</value></option>
            <option label='Write only (set)'><value>set</value></option>
            <option label='Read and write (both)'><value>both</value></option>
        </field>
        <field type='list-single'
            label='Manage PubSub (http://jabber.org/protocol/pubsub) READ'
            var='http://jabber.org/protocol/pubsub'>
            <value>0</value>
            <option label='None'><value>none</value></option>
            <option label='Read only (get)'><value>get</value></option>
        </field>
    </x>
</message>
]]></example>
<p>The server SHOULD include a warning message, SHOULD translate the namespace to human friendly names (and MAY keep the original namespace in addition) and MUST set the default value to "<strong>none</strong>" (permission refused). The server SHOULD use namespace as field var, so a client can use it to have a customized display.</p>
<p>The client can then answer to the form:</p>
    <example caption='Client Answer To The Form'><![CDATA[
<message from='juliet@capulet.net' to='capulet.net'>
  <x xmlns='jabber:x:data' type='submit'>
    <field var='FORM_TYPE'>
      <value></value>
    </field>
    <field var='challenge'><value>5439123</value></field>
    <field var='jabber:iq:roster'><value>both</value></field>
    <field var='http://jabber.org/protocol/pubsub'><value>none</value></field>
  </x>
</message>
]]></example>
<p>Here Juliet allows <em>priv.montaigu.net</em> to use 'set' and 'get' in order to manage her roster, but doesn't want it to do any 'get' on her pubsub nodes.</p>
<p>Finaly, the server notify the entity of the granted permissions. For this it uses a &QUERY; element with the 'allowed' type, and puts the client JID in a 'from' attribute:</p>
            <example caption='Server notify accepted permissions'><![CDATA[
<iq from='capulet.net' to='priv.montaigu.net' type='set' id='privilege2'>
    <query xmlns='urn:xmpp:privilege:0'
        type='allowed'
        from='juliet@capulet.net'>
        <perm namespace='jabber:iq:roster' type='both'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='none'/>
    </query>
</iq>
]]></example>
<p>The privileged entity can now act according to permission granted to him.</p>
</section2>
<section2 topic='Privileged Entity Sends &IQ; Stanzas' anchor='priv_iq_client'>
    <p>Sending &IQ; stanzas is done in the exact same way as for <link url='#priv_iq_admin'>admin mode</link>. If an entity wants to sent a non authorized &IQ;, it will get a &forbidden; error:</p>
            <example caption='Entity Request bookmarks'><![CDATA[
<iq to='juliet@capulet.lit' type='get' id='bookmark1'>
    <pubsub xmlns='http://jabber.org/protocol/pubsub'>
        <items node='storage:bookmarks'/>
    </pubsub>
</iq>
]]></example>

            <example caption='The Stanza Is Not Autorized !'><![CDATA[
<iq from='capulet.net' to='priv.montaigu.net' type='error' id='bookmark1'>
    <error type='cancel'>
        <forbidden xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    </error>
</iq>
            ]]></example>
</section2>
</section1>

<section1 topic='Special permissions' anchor='special'>
    <p>In some cases, an entity may need extra permission beyond what &IQ; stanzas can do. An entity may want to send &MESSAGE; stanzas on behalf of the server, or get &PRESENCE; informations. The special permissions manage these cases with some restrictions.</p>

        <section2 topic='Message Permission' anchor='message'>
        <p>With some namespaces it can be desirable to send notifications (e.g. PEP service), so the privileged entity must be able to send &MESSAGE; stanzas. To do this, it MUST request it by using a &lt;perm/&gt; element with the special "message" namespace attribute and a 'type' attribute with the value "outgoing" (any other type MUST be rejected with a &forbidden; error).</p>
        <p>A privileged entity can then send message on the behalf either of the server or of a bare JID of the server, using &xep0297;, with the following restrictions:</p>
        <ol>
            <li>forwarded &MESSAGE; 'type' attribute has the value of "headline"</li>
            <li>forwarded &MESSAGE; 'from' attribute MUST be a bare JID from the server, no resource is allowed</li>
            <li>in client mode, the forwarded &MESSAGE; 'from' attribute can only be one of a managed entity which has explicitly accepted the delegation</li>
        </ol>
        <p>If any of this rules is violated, the server MUST return a &lt;not-authorized/&gt; stream error and close the connection, as explained in &rfc6120; section 4.9.3.12.</p>
        <p>In the following example, <em>pubsub.capulet.lit</em> asks for pubsub and outgoing messages permission</p>
        <example caption='entity asks for outgoing messages permission'><![CDATA[
<iq from='pubsub.capulet.net' type='get' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0' type='request' privilege='admin'>
        <perm namespace='message' type='outgoing'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
    </query>
</iq>
            ]]></example>

        <example caption='server accepts permission'><![CDATA[
<iq from='capulet.net' to='pubsub.capulet.net' type='result' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0' type='allowed'>
        <perm namespace='message' type='outgoing'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
    </query>
</iq>
        ]]></example>
        <p>Now that <em>pubsub.capulet.lit</em> is allowed, it can send messages using &lt;forwarded/&gt; elements.</p>
        <example caption='privileged entity send a notificaction message'><![CDATA[
<message from='pubsub.capulet.lit' to='capulet.lit' id='notif1'>
    <forwarded xmlns='urn:xmpp:forward:0'>
        <message from='juliet@capulet.lit'
            id='foo'
            to='romeo@montague.lit/orchard'
            type='headline'
            xmlns='jabber:client'>
            <event xmlns='http://jabber.org/protocol/pubsub#event'>
                <items node='http://jabber.org/protocol/tune'>
                    <item>
                        <tune xmlns='http://jabber.org/protocol/tune'>
                            <artist>Gerald Finzi</artist>
                            <length>255</length>
                            <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
                            <title>Introduction (Allegro vigoroso)</title>
                            <track>1</track>
                        </tune>
                    </item>
                </items>
            </event>
            <delay xmlns='urn:xmpp:delay' stamp='2014-11-25T14:34:32Z'/>
        </message>
    </forwarded>
</message>
        ]]></example>
        <p>The server sees that forwarded message type is '<em>headline</em>', that <em>juliet@capulet.lit</em> is a bare JID of the server, and that outgoing message permission was granted in admin mode (so all bare JIDs from server are allowed); it can now send the notification:</p>
        <example caption='server sends the notification as if it was originating from him'><![CDATA[
<message from='juliet@capulet.lit'
    id='bar'
    to='romeo@montague.lit/orchard'
    type='headline'>
    <event xmlns='http://jabber.org/protocol/pubsub#event'>
        <items node='http://jabber.org/protocol/tune'>
            <item>
                <tune xmlns='http://jabber.org/protocol/tune'>
                    <artist>Gerald Finzi</artist>
                    <length>255</length>
                    <source>Music for "Love's Labors Lost" (Suite for small orchestra)</source>
                    <title>Introduction (Allegro vigoroso)</title>
                    <track>1</track>
                </tune>
            </item>
        </items>
    </event>
    <delay xmlns='urn:xmpp:delay' stamp='2014-11-25T14:34:32Z'/>
</message>
    ]]></example>
    </section2>

<section2 topic='Managed Entity Presence' anchor='managed_ent_presence'>
        <p>It can be often desirable for a privileged entity to have presence information of the managed entities (e.g. to know when to send it notificiations). As privileges must be transparent for the managed entity (in admin mode), this presence has to be sent by the server without modifying managed entity roster.</p>
        <p>To do this, the privileged entity MUST ask for presence information when requesting privileges, using a special "presence" namespace attribute and a 'type' attribute with the value "managed_entity".</p><p>If the delegation is granted, the server MUST use a directed presence, as specified in &rfc6121; section 4.6 on the behalf of managed entity each time its presence information change.</p><p>This privilege MUST NOT be requested in client mode, if so the server MUST reject the request by setting the allowed type to "none". If an entity needs presence information in client mode, it SHOULD request it using the normal &PRESENCE; subscription mechanism.</p>
<example caption='privileged entity asks for pusub privilege with presence'><![CDATA[
<iq from='pubsub.capulet.net' type='get' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0' type='request' privilege='admin'>
        <perm namespace='presence' type='managed_entity'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
    </query>
</iq>
]]></example>

<example caption='server accepts privileges'><![CDATA[
<iq from='capulet.net' to='pubsub.capulet.net' type='result' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0' type='allowed'>
        <perm namespace='presence' type='managed_entity'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
    </query>
</iq>
]]></example>

<example caption='server receives new presence from Juliet'><![CDATA[
<presence from='juliet@capulet.lit/balcony'
          id='presence1'
          xml:lang='en'>
    <show>chat</show>
    <status>Staying on the balcony</status>
</presence>
]]></example>
<example caption='server redirects presence to privileged entity'><![CDATA[
<presence from='juliet@capulet.lit/balcony'
          to='pubsub.capulet.lit'
          id='presence1'
          xml:lang='en'>
    <show>chat</show>
    <status>Staying on the balcony</status>
</presence>
]]></example>
    </section2>

<section2 topic='Roster Presence' anchor='roster_presence'>
    <p>In addition to "<link url='#managed_ent_presence'>managed entity presence</link>", a privileged entity may need to know when a contact in managed entity roster is online (for example, it's necessary for a PEP service because of the presence default access model).</p>
    <p>In this case, privileged entity MUST ask for presence information when requesting privileges, using a special "presence" namespace attribute (as in previous section) and a 'type' attribute with the value "roster". Furthermore, the privileged entity MUST have read permission on roster namespace (i.e. 'type' attribute in allowed &lt;perm&gt; of namespace <em>jabber:iq:roster</em> MUST have a value of either <strong>get</strong> or <strong>both</strong>).</p>
    <p>If the delegation is granted, the server MUST send to the privileged entity every presence information that the managing entity is receiving.</p><p>The server MUST reject the permission if the privileged entity doesn't have read permission on roster namespace.</p>
    <p>Note: this permission should be given carefully, as it gives access to presence of potentially a lot of entities to the privileged entity (see <link url='#security'>security considerations</link>). If allowed in client mode, server SHOULD display an extra warning when requesting permissions to the managed entity.</p>
<example caption='privileged entity asks for pusub privilege with presence roster'><![CDATA[
<iq from='pubsub.capulet.net' type='get' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0' type='request' privilege='admin'>
        <perm namespace='presence' type='roster'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
        <perm namespace='jabber:iq:roster' type='get'/>
    </query>
</iq>
]]></example>
<p>Note the presence of <em>jabber:iq:roster</em> permission request.</p>

<example caption='server accepts privileges'><![CDATA[
<iq from='capulet.net' to='pubsub.capulet.net' type='result' id='privilege1'>
    <query xmlns='urn:xmpp:privilege:0' type='allowed'>
        <perm namespace='presence' type='roster'/>
        <perm namespace='http://jabber.org/protocol/pubsub' type='both'/>
        <perm namespace='jabber:iq:roster' type='get'/>
    </query>
</iq>
]]></example>

<example caption="server receives new presence from Romeo, which is in Juliet's roster"><![CDATA[
<presence from='romeo@montaigu.lit/orchard'/>
]]></example>
<example caption='server sends the presence as usually, but also to the privileged entity'><![CDATA[
<presence from='romeo@montaigu.lit/orchard'
          to='juliet@capulet.lit'/>
<presence from='romeo@montaigu.lit/orchard'
          to='pubsub.capulet.lit'/>
]]></example>
</section2>
</section1>

<section1 topic='Configuration' anchor='configuration'>
    <p>Server SHOULD provide a way for clients to check already granted permission, and revoke them by using &xep0050; on the well-defined command node <strong>'urn:xmpp:privilege:0#configure'</strong>.</p>
    <p>If present, the configuration commands MUST allow at least to check permissions granted to a privileged entity, and to revoke them. A server MAY offer an option to keep permission from one session to an other (see <link url='#rules'>business rules</link>).</p>
</section1>

<section1 topic='Discovering Support' anchor='disco'>
  <p>If a server or an entity supports the privileged entity protocol, it MUST report that fact by including a service discovery feature of "urn:xmpp:privilege:0" in response to a &xep0030; information request:</p>
  <example caption="Service Discovery information request"><![CDATA[
<iq from='pubsub.capulet.net'
    id='disco1'
    to='capulet.net'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption="Service Discovery information response"><![CDATA[
<iq from='capulet.net'
    id='disco1'
    to='pubsub.capulet.net'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='urn:xmpp:privilege:0'/>
    ...
  </query>
</iq>
  ]]></example>
</section1>

<section1 topic='Business Rules' anchor='rules'>
    <ol>
        <li>In client mode, server MAY keep permission granted to an entity by a client from one session to an other, but if it do so, it MUST provide configuration like explained in the <link url='#configuration'>suitable section</link>. If server offers this feature, it SHOULD add a field directly in configuration commands.</li>
        <li>If a client can't check or revoke permission (i.e. it doesn't support &xep0050;) when granting permissions, the server MUST NOT keep granted permissions from one session to an other, and permissions will be asked on each new session.</li>
        <li>If permissions are changed during a session, server MUST notify privileged entity of the new permissions, like in <link url='#client_perm'>permission request use case</link>.</li>
        <li>A server MUST NOT grant permission for this XEP namespace (<strong>'urn:xmpp:privilege:0'</strong>).</li>
    </ol>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
    <p>As admin mode is far more easy to implement than client mode, a server MAY choose to only implement the former.</p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
    <ol>
        <li>Privileged entity nearly have the same possibility as the server itself, <em>admin</em> permission should be granted carefuly, only if you absolutely trust the entity.</li>
        <li>A server MAY choose to filter allowed namespaces, to avoid giving dangerous permissions. In this case, it MUST always set the allowed type of filtered namespaces to "<strong>none</strong>"</li>
        <li><link url='#roster_presence'>Roster presence</link> is particulary sensitive, because if an entity accept this permission, it shares presence information of its whole roster. For this reason, a server MAY choose to forbid its use in client mode (by always setting the allowed type to "<strong>none</strong>"). A server SHOULD at least disallow it in default configuration.</li>

        <li>In case of filtering, a whitelist system is more secure and SHOULD be prefered to a blacklist (idealy, configuration would allow no filtering, whitelist filtering and blacklist filtering).</li>
    </ol>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='ns'>
    <p>The &REGISTRAR; includes 'urn:xmpp:privilege:0' in its registry of protocol namespaces (see &NAMESPACES;).</p>
    <ul>
      <li>urn:xmpp:privilege:0</li>
    </ul>
  </section2>
  <section2 topic='Protocol Versioning' anchor='registrar-versioning'>
    &NSVER;
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:privilege:0'
    xmlns='urn:xmpp:privilege:0'
    elementFormDefault='qualified'>

  <xs:element name='query'>
      <xs:complexType>
          <xs:attribute name='type' use='required'>
              <xs:simpleType base='xs:NMTOKEN'>
                  <xs:enumeration value='request'/>
                  <xs:enumeration value='allowed'/>
              </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='privilege' use='optional'>
              <xs:simpleType base='xs:NMTOKEN'>
                  <xs:enumeration value='admin'/>
                  <xs:enumeration value='client'/>
              </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='to' use='optional' type='xs:string'/>
          </xs:attribute>
          <xs:element name='perm'
                      maxOccurs='unbounded'>
              <xs:complexType>
                  <xs:attribute name='namespace' use='required' type='xs:string'/>
                  <xs:attribute name='type' use='required'>
                      <xs:simpleType base='xs:NMTOKEN'>
                          <xs:enumeration value='none'/>
                          <xs:enumeration value='get'/>
                          <xs:enumeration value='set'/>
                          <xs:enumeration value='both'/>
                      </xs:simpleType>
                  </xs:attribute>
              </xs:complexType>
          </xs:element>
      </xs:complexType>
  </xs:element>

</xs:schema>
    ]]></code>
</section1>

<section1 topic='Acknowledgements' anchor='acks'>
  <p>Thanks to Sergey Dobrov, Dave Cridland, Steven Lloyd Watkin, Lance Stout and Johannes Hund for their feedbacks. Thanks to Adrien Cossa for his typos/style corrections.</p>
  <p>The client mode permission mechanism is inspired from &xep0321; permission request.</p>
</section1>

</xep>
