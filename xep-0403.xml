<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<?xml-stylesheet type="text/css" href="xmpp.css"?>
<xep>
<header>
  <title>Mediated Information eXchange (MIX): Presence Support.</title>
  <abstract>This document defines an extension to Mediated Information eXchange (MIX) specified in XEP-0369 to provide presence information for MIX clients to MIX channel participants. </abstract>
  &LEGALNOTICE;
  <number>0403</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0004</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0054</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0084</spec>
    <spec>XEP-0128</spec>
    <spec>XEP-0198</spec>
    <spec>XEP-0292</spec>
    <spec>XEP-0297</spec>
    <spec>XEP-0313</spec>
    <spec>XEP-0369</spec>
    <spec>XEP-0372</spec>
   </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>MIX-PRESENCE</shortname>
  &ksmithisode;
  &skille;
  <revision>
    <version>0.1.0</version>
    <date>2018-05-21</date>
    <initials>sek</initials>
    <remark><p>
      Split out from MIX 0.10.0;
    </p></remark>
  </revision>
  
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>The Mediated Information eXchange (MIX) protocol framework and core capabilities for message distribution are specified in &xep0369; (MIX-CORE).    This specification enables presence status of online clients belonging to channel participants to be shared through the channel with participants that wish to see this presence status.   This is a achieved by a MIX presence node, which channel participants may subscribe to.    
   </p>
 
</section1>

<section1 topic='Requirements' anchor='reqs'>

<p>This specification addressed a number of presence requirements:</p>
  
  <ol>
    <li>The mechanism must work cleanly for participants with multiple clients.</li>
    <li>Stanard presence messages must be used to share presence.</li>
    <li>Nick changes should be visible as changes (and not as a new user).</li>
    <li>Where MIX-ANON is not used,  participants must be able to directly contact other participants.</li>
    
  </ol>
  
</section1>

<section1 topic='Concepts' anchor='concepts'>
 
  
  <section2 topic="User Presence in MIX" anchor="concepts-presence">
    <p>
      MIX channels store presence of each online client for a user that chooses to publish presence.  Presence is stored in the presence node and is encoded using a full proxy JID.  Where a user publishes presence for one or more clients, this information is available to all users subscribing to the channel presence.
    </p>
    <p>
      A client participating in a MUC channel MAY send it's presences status to the MIX channel using standard presence.  The mechanisms to do this are summarized in the next section and standardized in MIX-PAM.
    </p>
    
    <p>
      The MIX channel will distribute received presence to participants that have subscribed to the participants node.   The client to which each presence update refers is identified by the &lt;from&gt; of the presence sent by the MIX channel.  This is also the JID stored in the MIX presence node. This JID is built from two components:
    </p>
    <ol>
      <li>The bare proxy JID of the client, as specified in MIX-CORE.  This encodes channel and a stable random ID in a JID associated with the MIX domain, which enables it to be used for sending presence.   </li>
      <li>The resource taken from the clientâ€™s full JID, except when MIX-ANON is used, when the resource is hidden.</li>
    </ol>
    <p>
      A client receiving this presence can use information from the channel participant's node to derive the full JID of the client and an associated Nick.   When MIX-ANON is used to hide JIDs, only the Nick can be derived.   
    </p>
   
    <p>
      Presence updates are distributed by a channel to the bare JID of each participant and then the subscriber's server will distribute to each of the participant's currently online clients following the rules set out in MIX-PAM.
    </p>
  </section2>
  
  

  <section2 topic="MIX Channels in Roster" anchor="concepts-roster">
    <p> 
      When a user joins a MIX channel, the channel MUST be added to the user's roster, as specified in MIX-PAM.   There are two reasons for this.
    </p>
    <ol>
      <li>It enables a client to determine which channels the user has joined and so may expect messages and/or presence updates from (dependent on what the user has subscribed to).</li>
      <li>
        When the user has chosen to share presence with the channel, it enables this to happen using standard presence mechanisms.  This avoids the need for MIX-specific mechanisms for clients to update presence on a channel.  When a client comes online, presence information will be sent to each MIX channel that the user participates in.   This will update other channel participants.  It will also lead to a presence update for each MIX channel being sent to the client.   So a user will receive channel presence information as the user comes online, in contrast to being subsequent to a MUC Join.  
      </li>
    </ol>
  </section2>
 
 

 
    

  <section2 topic="Presence Node" anchor="prsence-node">
    <p>MIX defines one node to support presence, as summarized in the table below.  This node is required to support this specification.</p>
    <table caption="MIX Presence Node">
      <tr><th>Name</th><th>Node</th><th>Description</th><th>Update</th><th>Distribution</th></tr>
 
      <tr><td>Presence</td><td>'urn:xmpp:mix:nodes:presence'</td><td>For storing information about the availability status of online participants, which MAY include multiple clients for a single participant.</td><td>Presence</td><td>Presence</td></tr>
 
    </table>


      
      
      <p>
        The presence node contains the presence value for clients belonging to participants that choose to publish presence to the channel. A MIX channel MAY require that all participants publish presence, so that active channel participants are visible.  It is not possible to enforce this in the server, so participants in a channel with this option MUST publish presence.  Each item in the presence node is identified by a JID constructed from  the proxy JID and the resource for the client.  The presence is encoded as a standard a presence stanza using a &lt;presence/&gt; element qualified by the 'jabber:client' namespace. 
      </p>

      <p>
        This node MAY be subscribed to by users using the user's bare JID.  So presence of online clients is sent to the user's server for each user subscribed to this node. Presence is always sent using standard presence protocol and MUST NOT be sent using pubsub protocol.   Clients MUST NOT directly access the presence node using pubsub.  The Presence node is a permanent PubSub node.  The following example shows a presence node value for the full JID 'hecate@shakespeare.example/UUID-x4r/2491'.  
      </p>
      <example caption="Value of Presence Node"><![CDATA[
<items node='urn:xmpp:mix:nodes:presence'>
  <item id='123456#coven@mix.shakespeare.example/UUID-x4r/2491'>
    <presence xmlns='jabber:client'>
      <show>dnd</show>
      <status>Making a Brew</status>
    </presence>
  </item>
</items>
]]></example>
    
 
 
  </section2>

</section1>



<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Common User Use Cases' anchor='usecases-user'>

 
    <section3 topic='Setting User Presence' anchor='usecase-user-presence'>
      <p>

        A user joins a channel over an extended period, and participation in a channel does not generally change when user goes online or offline.   The user's  participation in a channel is reflected by the user's bare JID in the participant node.   All messages to the channel are sent to this JID.

      </p>
      <p>

A user MAY share presence information with the channel, for one or more online clients.   The channel is entered by the user's server into the user's roster when the user subscribes to the channel as specified in MIX-PAM.  Where a user shares presence information with a channel, the subscription is configured with one way presence, which will cause all presence changes for the client to be sent to the channel.
    When an XMPP client comes online or changes presence status, this will be communicated by the user to the user's server using broadcast presence.  The user's XMPP server is then responsible to share this presence information to each entry in the roster and in particular to each MIX channel in the roster.  
      </p>
      <p>
    The MIX channel will update the "urn:xmpp:mix:nodes:presence" node with any change of status and the updated presence information and then share this updated presence with users subscribed to this node, as described below.   When the user sets an explicit status, this is used to modify the presence node in the channel.   When a client being used by the user goes offline, the associated server will send presence status "unavailable" to the MIX channel, which will cause the node item for that client to be removed from the presence node.
      </p>
      <p>
        A channel MAY require that all channel participants share presence information with the channel, which is represented in the "urn:xmpp:mix:nodes:presence" node.   If sharing presences is mandated by the channel, a server complying to this specification and to MIX PAM MUST set the presence subscription to "on way" and MUST NOT set it to "none".   
      </p>
      <p>
      Presence status and availability is set in a MIX channel by standard presence stanzas sent to the MIX channel by the user's server.   Users wishing to receive presence updates will subscribe to the MIX channel presence node.   Presence updates are sent out to subscribing participants using standard presence stanzas.
      </p>
      <p>
        A user setting status is now used as an example.   Unlike in &xep0045; where coming online is a special action, coming online in MIX is implicit when presence status is set.  Going offline is a achieved by setting presence status to unavailable, which removes the client full JID entry from the presence node.  When a user sets a presence status, the user's server sends updated presence to the MIX channel, and the MIX service then publishes the user's  availability to the "urn:xmpp:mix:nodes:presence" node. If there is not an item named by the full JID of the client with updated presence status, this item is created.   The sequence is shown in the following examples, starting with a client setting presences status on the connected server.</p>
      <example caption="Client Sets Presence Status on Server">
        <![CDATA[<presence xmlns='jabber:client' from='hag66@shakespeare.example/UUID-a1j/7533'>
  <show>dnd</show>
  <status>Making a Brew</status>
</presence>]]></example>

      <p>
        The server then sends the presence information to roster entries.  The following example then shows the presence message from the client's server to the MIX channel.
      </p>
      <example caption="Server sends Presence Status to MIX Channel">
<![CDATA[<presence  from='hag66@shakespeare.example/UUID-a1j/7533'
              to='coven@mix.shakespeare.example'>
  <show>dnd</show>
  <status>Making a Brew</status>
</presence>]]></example>
      <p>The user's presence information is then published by the service to the "urn:xmpp:mix:nodes:presence" node, with the 'publisher' attribute set to the user's participant identifier (the proxy JID). The MIX channel then broadcasts the presence change to all users who are subscribed to the "urn:xmpp:mix:nodes:presence" node.  The presence stanza is sent from the full proxy JID of the client updating status.
      Note that presence is associated with a client and so will have a full JID.  The following example shows a presence message as distributed by the server to a presences subscriber.</p>
      <example caption="Channel Distributes Presence">
        <![CDATA[<presence from='123435#coven@mix.shakespeare.example/UUID-a1j/7533'
          to='hag99@shakespeare.example'
          id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'>
  <show>dnd</show>
  <status>Making a Brew</status>
</presence>]]></example>
    <p>
     The presence is distributed to those subscribing to the MIX channel presence node using a standard XMPP presence stanza. The presence change is recorded on the "urn:xmpp:mix:nodes:presence" node. The history of this node will be held as PubSub format in the MAM archive, so that presence history can be viewed.
    </p>
    </section3>
    
    
    
    

    <section3 topic="Client Coming Online and Obtaining Presence from the Local Server" anchor="usecase-obtaining-presence">
      <p>
        The presence information for a channel  is stored in the urn:xmpp:mix:nodes:presence node and distributed using standard presence stanzas to the server of each user subscribing to this presence node.  The user's local server will then pass this presence information on to all online clients.   This ensures that an online client is kept updated with presence.  
        When a client goes offline, it will cease getting presence updates. Presence updates will continue to flow to the user's local server, and so the local server is able maintain up to date presence state for the channel. The user's server MAY cache this presence information to optimize performance or MAY discard it.
      </p>
       <p>
        When the client comes online, it will activate use of the MIX.    The user's server will then send full presence status to the client using standard presence messages.   This will enable the client to update presence information for the channel.  Note that this does not need any interaction with the channel.
       </p>

    </section3>

    <section3 topic="Updating Presence on User&apos;s Server" anchor="usecase-server-presence-update">
      <p>
        In normal operation a MIX participant's server  will hold accurate presence status for the channel which it provides to clients when they are activated.  Incoming presence updates are immediately sent to active MIX clients.
      </p>
      <p>
        There are two situations where a MIX participant's server  will need to get presence status from the channel.   The first time is when a user joins the channel as a participant and subscribes to presence.   Upon this subscription the MIX channel will send to the participant's server (using the user's bare JID) presence for all of the items in the presence node using standard presence stanzas.  This will give the participant's full current presence for the channel.
      </p>
      <p>
        The second scenario is when the MIX participant's server needs to load or refresh presence status for a channel.  This will be needed when the participant's server is started.   This MIX participant's server requests presence update by sending a directed presence stanza to the MIX channel from the user's bare JID. The MIX channel can distinguish this from a presence update, which will always be sent from the clients full JID.   This special presence stanza will send to the participant's server (using the user's bare JID) presence for all of the items in the presence node using standard presence stanzas.
      </p>
    </section3>
    <section3 topic="Determining Real JIDs" anchor="usecase-real-jids">
      <p>
        Presence information will provide a MIX client with the nicks and  proxy JIDs for participants in a channel.    Messages sent to a channel and retrieved from MAM archives will show the proxy JID and nick of the sender.   It is sometimes useful to determine the real JID associated with proxy JID.  This can always be done for JID Visible channels and can sometimes be done for JID Maybe Visible channels.

      </p>
      <p>
        For current users JID visible rooms, the real JID is found by a PubSub lookup on the JID Map node.  This is shown in the following example:
      </p>

      <example caption='Client looks up Real JID from Proxy JID'><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='kl2fax27'
    to='coven@mix.shakespeare.example'
    type='get'>
     <pubsub xlns='http://jabber.org/protocol/pubsub'>
        <items node='urn:xmpp:mix:nodes:jidmap'>
           <item id='123456#coven@mix.shakespeare.example'/>
        </items>
     </pubsub>
</iq>

<iq from='coven@mix.shakespeare.example'
    id='kl2fax27'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    type='result'>
     <pubsub xlns='http://jabber.org/protocol/pubsub'>
       <items node='urn:xmpp:mix:nodes:jidmap'>
         <item id='123456#coven@mix.shakespeare.example'>
           <participant xmlns='urn:xmpp:mix:1'>
             <jid>hecate@mix.shakespeare.example</jid>
           </participant>
         </item>
       </items>
     </pubsub>
  <items>
</iq>]]> </example>


      <p>For JID Maybe Visible rooms the lookup is performed on the JID Maybe Visible Map node.   Note that where a user prefers to not share real JID, the result of this lookup of proxy JID will be the (same) proxy JID. </p>

      <p>
        When an older message is considered, it is possible that the proxy JID of the sender is not current.   Such a JID can be looked up in the MAM Archive of the JID Map Node.  This is shown in the following example:
      </p>
      <example caption='Client looks up Real JID from Proxy JID in MAM Archive'><![CDATA[
<iq from='hag66@shakespeare.example/UUID-c8y/1573'
    id='kl2fax27'
    to='coven@mix.shakespeare.example'
    type='set'>
   <query xlns='urn:xmpp:mam:2'
          queryid='f28'
          node='urn:xmpp:mix:nodes:jidmap'>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>urn:xmpp:mam:2</value>
        </field>
        <field var='id'>
          <value>123456#coven@mix.shakespeare.example</value>
        </field>
      </x>
   </query>
</iq>

<message id='iasd208' to='hag66@shakespeare.example/UUID-c8y/1573'>
  <result xmlns='urn:xmpp:mam:2' queryid='f28' id='28482-20987-73623'>
    <forwarded xmlns='urn:xmpp:forward:0'>
      <delay xmlns='urn:xmpp:delay' stamp='2010-07-10T23:08:25Z'/>
      <message xmlns="jabber:client">
         <event xmlns='http://jabber.org/protocol/pubsub#event'>
           <items node='urn:xmpp:mix:nodes:jidmap'>
             <item id='123456#coven@mix.shakespeare.example'>
               <participant xmlns='urn:xmpp:mix:1'>
                 <jid>hecate@mix.shakespeare.example</jid>
               </participant>
             </item>
           </items>
         </event>
       </message>
    </forwarded>
  </result>
</message>

<iq from='coven@mix.shakespeare.example'
    to='hag66@shakespeare.example/UUID-c8y/1573'
    id='kl2fax27'
    type='result'>
</iq>]]> </example>



    </section3>

 

    <section3 topic='Going Offline' anchor='usecase-user-offline'>
      <p>When a client goes offline, this presence update is sent by the client's server to the MIX channel.   From the client perspective, this is the same as any other presence change.   Handling by the MIX channel is slightly different.</p>
      <example caption="Client Goes Offline in the Channel"><![CDATA[
<presence type='unavailable'
          from='hag66@shakespeare.example/UUID-a1j/7533'
          to='coven@mix.shakespeare.example'/>
]]></example>
      <p>The MIX channel will retract (remove) the item in the presence node of the MIX channel identified by the client's full JID.  The MIX channel will notify subscribers to the presence node of the user going offline by sending a presence stanza to the full  JID of each client. The presence stanza will reference the full proxy JID of the client that is going offline, as shown in the following example:</p>
      
      <example caption="Channel Distributes Notification of Client going Offline">
<![CDATA[<presence from='12345#coven@mix.shakespeare.example/678'
          to='hecate@shakespeare.example'
          id='77E07BB0-55CF-4BD4-890E-3F7C0E686BBD'
          type='unavailable'/>]]></example>

      <p>
        There is the possibility that the message associated with the user going offline will be lost.   If this happens, "ghost" entries will appear in the presence node.   A MIX service MAY take steps to address this, for example by probing client with a disco for presence items that remain unchanged for a long period.
      </p>
      <p>
        It is desirable to prevent clients from going offline briefly and then coming back online again, as this will lead to "flapping presence".   The RECOMMENDED approach to achieve this is use of &xep0198; to maintain an XMPP client connection in the event of short term TCP failure.
      </p>
      
      
      <p>  *** LEAVE *** When the user leaves the channel, the MIX service is responsible for unsubscribing the user from all nodes in the channel and for removing the user from the participants and presence list.  If the user has online presence when the user leaves the channel, the change of presence status caused by removing the user's entry or entries from the presence node will ensure that subscribers to the presence node are correctly updated on presence status, as specified in MIX-PRESENCE.
        
        
        Deletion from the participants and presence functions as if the item (channel participant) had been deleted using the PubSub retract mechanism with notification set to true.    Notification of the deletion is sent to clients subscribed to the participants  PubSub nodes, as shown in the example below.
      </p>
      
 

      <example caption="Reporting when User Leaves a Channel"><![CDATA[
<message from='coven@mix.shakespeare.example'
                to='hecate@shakespeare.example' id='f5pp2toz'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items xmlns='urn:xmpp:mix:core:0' node='urn:xmpp:mix:nodes:participants'>
      <item>
        <retract id='123456#coven@mix.shakespeare.example'/>
      </item>
    </items>
  </event>
</message>

<message from='coven@mix.shakespeare.example'
                to='other-witch@shakespeare.example' id='bar'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items xmlns='urn:xmpp:mix:core:0' node='urn:xmpp:mix:nodes:presence' >
      <item>
        <retract id='123456#coven@mix.shakespeare.example/8765'/>
      </item>
    </items>
  </event>
</message>
]]></example>
      
    </section3>

  </section2> 
</section1>

 

 

  

<section1 topic="Presence Initializion" anchor="use-presence-initialize">
  <p>
    For an active MIX Channel, the presence node is updated as channel participants change status and presence information is sent to the channel.  When a MIX channel starts, typically when the associated MIX Service and Server start, there is a need to initialize the presence node.    This is done by the XMPP server associated with the MIX channel sending out a presence probe for each channel participant, following the presence probe process specified in &rfc6121;.   A presence probe MUST NOT be sent for users who have set presence preference to not sharing.
  </p>
</section1>
 

<section1 topic='Internationalization Considerations' anchor='i18n'>
  <p>See considerations in MIX-CORE.
  </p>

</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>See considerations in MIX-CORE.</p>
  
  <p>
    When converting a 1:1 conversation to a channel there is potential to expose sensitive information and to present invalid information.
  </p>

</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>None.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>The urn:xmpp:mix namespace needs to be registered.</p>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <p>To be supplied when MIX progresses to proposed standard.</p>
</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>See MIX-CORE for a list of contributors to the MIX Family of specifications.</p>
</section1>

</xep>
